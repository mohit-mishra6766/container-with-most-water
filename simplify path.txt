class Solution {
    public String simplifyPath(String path) {
       if (path == null || path.length() <= 1) {
            return "/";
        }

        Stack<String> pathStack = new Stack<>();
        StringBuilder ans = new StringBuilder();
        path = path.replaceAll("\\/\\/", "/");
        String[] folders = path.split("\\/");
        int len = folders.length;
        for (int i = 0; i < len; i++) {
            String folder = folders[i];
            if (folder.equalsIgnoreCase(".")) {
                continue;
            } else if (folder.equalsIgnoreCase("..")) {
                if (!pathStack.empty()) {
                    pathStack.pop();
                }
            } else if (folder.length() > 0) {
                pathStack.push(folder);
            }
        }

        ans.append('/');
        List<String> res = new ArrayList<>();
        while (!pathStack.empty()) {
            res.add(pathStack.pop());
        }

        for (int i = res.size() - 1; i >= 0; i--) {
            ans.append(res.get(i));
            ans.append("/");
        }

        if (ans.length() > 1 && ans.charAt(ans.length() - 1) == '/') {
            ans.deleteCharAt(ans.length() - 1);
        }

        return ans.toString();
     
    }
}