
class Solution {
   static class Pair {
        int num;
        int freq;
        Pair(int n,int f){
            this.num=n;
            this.freq=f;
        }

    }
    static class MyComparartor implements Comparator<Pair> {
        public int compare(Pair o1, Pair o2) {
            if(o1.freq>o2.freq)
                return -1;
            else if (o1.freq==o2.freq) {
                if(o1.num>o2.num)
                    return 1;
                else
                    return -1;
            }
            else
                return 1;
        }
    }
    public static ArrayList<ArrayList<Integer>> kTop(int[] arr, int N, int K) {
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<N;i++){
            PriorityQueue<Pair> pq=new PriorityQueue<>(new MyComparartor());
            int num=arr[i];
            if(map.containsKey(num))
                map.put(num,map.getOrDefault(num,0)+1);
            else
                map.put(num,0);
            for(Map.Entry<Integer,Integer> entry: map.entrySet()){
                pq.add(new Pair(entry.getKey(), entry.getValue()));
            }
            int count=K;
            ArrayList<Integer> al=new ArrayList<>();
            while(!pq.isEmpty()&&count>=1){
                al.add(pq.poll().num);
                count--;
            }
            ans.add(al);
        }
        return ans;
    }
}
        
