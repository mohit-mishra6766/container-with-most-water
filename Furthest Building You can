class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        // int ans = 0 ;
        int n = heights.length;
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int i = 0 ; i < n-1 ; i++){
            if(heights[i] >= heights[i+1])
            continue;
            int diff = heights[i+1]-heights[i];
            if(bricks >= diff){
                bricks-= diff;
                pq.offer(diff); 
            }
            else if (ladders > 0 ){
                if(!pq.isEmpty()){
                    int top = pq.peek();
                    if(top >= diff){
                        bricks+=top;
                        pq.poll();
                        pq.offer(diff);
                        bricks-=diff;
                        ladders--;
                    }else{
                        ladders--;
                    }
                }
                else
                ladders--;
            }
            else{
                return i;
            }
        }
        return n-1;
    }
}
