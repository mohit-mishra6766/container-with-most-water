
class Solution
{
    static int[] findOrder(int n, int m, ArrayList<ArrayList<Integer>> prerequisites) 
    {
        int[] indegree = new int[n];
        int[] ans = new int[n];
        
         ArrayList<ArrayList<Integer>> graph=new ArrayList<>();
         
        for(int i=0;i<n;i++)
        {
            graph.add(new ArrayList<>());
        }
        
        //Build graph and indegree array
        for(ArrayList<Integer> edge : prerequisites )
        {
            int course=edge.get(0);
            int precourse=edge.get(1);
            graph.get(precourse).add(course);
            indegree[course]++;
        }
        
        Queue<Integer> q= new LinkedList<>();
        for(int i=0;i<n;i++)
        {
            if(indegree[i]==0) q.offer(i);
        }
        
        int i=0;
        while(!q.isEmpty())
        {
            int curr=q.poll();
            ans[i++]=curr;
            
            for(int num: graph.get(curr))
            {
                indegree[num]--;
                if(indegree[num]==0) q.offer(num);
            }
        }
        
        if(i==n) return ans;
        else return new int[0];
        
    }
}
